"""\nMódulo dedicado exclusivamente al estado maestro de posición de trading.\nContiene la clase TradingPositionState que actúa como orquestador principal.\n"""\n\nfrom __future__ import annotations\n\nimport logging\nfrom typing import Any, Dict\n\nfrom pydantic import BaseModel, ConfigDict, model_validator\n\nfrom .alert_manager import AlertPayload\nfrom .data_models import (\n    GlobalTotalImpulseData,\n    GlobalTotalTrendData,\n    MacdCycleData,\n    PartialImpulseData,\n    PartialPhaseData,\n    SymbolRankingMetrics,\n    TotalImpulseData,\n    TotalTrendData,\n)\nfrom .metrics_manager import MetricsManager\nfrom .cosmic_hierarchy_orchestrators import CosmicHierarchyMasterOrchestrator\nfrom .state_orchestrators import (\n    GlobalTimeframeOrchestrator,\n    GlobalTotalImpulseStates,\n    GlobalTotalImpulseSummary,\n    GlobalTotalTrendStates,\n    GlobalTotalTrendSummary,\n    MacdCycleStates,\n    MarketRegimeOrchestrator,\n    PartialImpulseStates,\n    PartialPhaseStates,\n    TotalImpulseStates,\n    TotalTrendStates,\n)\nfrom .trading_data_models import AlertManagerData\nfrom .trading_types import MultiTimeframeLiteralType\n\nlogger = logging.getLogger(__name__)\n\nclass TradingPositionState(BaseModel):\n    \"\"\"\n    Contenedor Maestro del Estado. Ensambla los componentes de datos y los orquestadores\n    de estado para un único símbolo. Actúa como la \"fuente única de la verdad\".\n    \"\"\"\n    model_config = ConfigDict(arbitrary_types_allowed=True, extra=\"ignore\", validate_assignment=True)\n\n    # --- Identificador Principal ---\n    symbol: str\n\n    # --- Gestor de Datos de Entrada (El \"Oído\") ---\n    alert_manager_data: AlertManagerData\n\n    # --- JERARQUÍA CÓSMICA: LOS 13 PERÍODOS DE ANÁLISIS ---\n    # Contenedores de Datos (Los \"Órganos\" que almacenan la información)\n    \n    # NIVELES 1-5: ANÁLISIS INTRA-TIMEFRAME (1m)\n    # Nivel 1: La Ola - Fluctuación más inmediata\n    partial_phase_data: PartialPhaseData\n    \n    # Nivel 2: La Marea Parcial - Impulso corto compuesto de Olas\n    partial_impulse_data: PartialImpulseData\n    \n    # Nivel 3: La Lucha de Mareas - Ciclo completo alcista + bajista\n    macd_cycle_data: MacdCycleData\n    \n    # Nivel 4: La Corriente Oceánica - Dirección principal del momentum en 1m\n    total_impulse_data: TotalImpulseData\n    \n    # Nivel 5: La Fuerza Terrestre - Tendencia estructural en 1m\n    total_trend_data: TotalTrendData\n    \n    # NIVELES 6-13: ANÁLISIS MULTI-TIMEFRAME (Fuerzas Gravitacionales)\n    # Niveles 6-9: Impulsos en timeframes superiores (Fuerzas Cósmicas)\n    # Nivel 6: La Fuerza Lunar (5m) - Primera influencia gravitacional externa\n    # Nivel 7: La Fuerza Solar (15m) - Influencia dominante intradiaria\n    # Nivel 8: La Fuerza del Sistema Solar (1h) - Estructura de sesión completa\n    # Nivel 9: La Fuerza de la Vía Láctea (4h) - Momentum estructural a medio plazo\n    global_total_impulse_data: Dict[MultiTimeframeLiteralType, GlobalTotalImpulseData]\n    \n    # Niveles 10-13: Tendencias en timeframes superiores (Tendencias Maestras)\n    # Nivel 10: La Fuerza del Grupo Local (5m) - Tendencia estructural Lunar\n    # Nivel 11: La Fuerza del Cúmulo de Virgo (15m) - Tendencia estructural Solar\n    # Nivel 12: La Fuerza de Andrómeda (1h) - Tendencia estructural del Sistema Solar\n    # Nivel 13: La Fuerza del Universo (4h) - La Tendencia Maestra, contexto absoluto\n    global_total_trend_data: Dict[MultiTimeframeLiteralType, GlobalTotalTrendData]\n\n    # --- ORQUESTADORES DE ESTADO (El \"Sistema Nervioso\") ---\n    # NIVELES 1-5: ORQUESTADORES INTRA-TIMEFRAME\n    # Nivel 1: Orquestador de \"La Ola\"\n    partial_phase_orchestrator: PartialPhaseStates\n\n    # Nivel 2: Orquestador de \"La Marea Parcial\"\n    partial_impulse_orchestrator: PartialImpulseStates \n\n    # Nivel 3: Orquestador de \"La Lucha de Mareas\"\n    macd_cycle_orchestrator: MacdCycleStates\n\n    # Nivel 4: Orquestador de \"La Corriente Oceánica\"\n    total_impulse_orchestrator: TotalImpulseStates \n\n    # Nivel 5: Orquestador de \"La Fuerza Terrestre\"\n    total_trend_orchestrator: TotalTrendStates\n\n    # --- ORQUESTADOR MAESTRO DE LA JERARQUÍA CÓSMICA (NIVELES 6-13) ---\n    # Gestiona todos los niveles superiores de forma unificada y consistente\n    cosmic_hierarchy_orchestrator: CosmicHierarchyMasterOrchestrator\n\n    # --- ORQUESTADORES ESPECIALIZADOS ---\n    # Gestiona el Régimen de Mercado basado en la Fuerza Terrestre (Nivel 5)\n    market_regime_orchestrator: MarketRegimeOrchestrator\n\n    # Gestor unificado de dinámicas multi-timeframe (Niveles 6-13) - DEPRECATED\n    # Mantenido por compatibilidad, pero la lógica principal está en cosmic_hierarchy_orchestrator\n    multi_tf_dynamics_manager: GlobalTimeframeOrchestrator\n\n    # Los datos de TFs > 1m están dentro de multi_tf_dynamics_manager\n    @property\n    def total_impulse_multi_tf_data(self) -> Dict:\n        return self.multi_tf_dynamics_manager.impulse_data_by_tf\n\n    @property\n    def total_trend_multi_tf_data(self) -> Dict:\n        return self.multi_tf_dynamics_manager.trend_data_by_tf\n\n    # --- Contenedor de Datos de Salida (El \"Informe Médico\") ---\n    ranking_metrics: SymbolRankingMetrics\n\n    @model_validator(mode=\"before\")\n    @classmethod\n    def init_and_sync_all(cls, values: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Validador que se ejecuta ANTES de crear la instancia.\n        Asegura que todos los componentes anidados se creen con el símbolo correcto.\n        \"\"\"\n        symbol = values.get(\"symbol\")\n        if not symbol: raise ValueError(\"TradingPositionState requiere un 'symbol'\")\n        \n        # Inicializar componentes si no se proporcionan, pasando el símbolo\n        # NIVELES 1-5: Contenedores de datos intra-timeframe\n        if \"alert_manager_data\" not in values: values[\"alert_manager_data\"] = AlertManagerData(symbol=symbol)\n        if \"partial_phase_data\" not in values: values[\"partial_phase_data\"] = PartialPhaseData(symbol=symbol)\n        if \"partial_impulse_data\" not in values: values[\"partial_impulse_data\"] = PartialImpulseData(symbol=symbol)\n        if \"macd_cycle_data\" not in values: values[\"macd_cycle_data\"] = MacdCycleData(symbol=symbol)\n        if \"total_impulse_data\" not in values: values[\"total_impulse_data\"] = TotalImpulseData(symbol=symbol)\n        if \"total_trend_data\" not in values: values[\"total_trend_data\"] = TotalTrendData(symbol=symbol)\n        \n        # NIVELES 6-13: Contenedores de datos multi-timeframe\n        if \"global_total_impulse_data\" not in values: values[\"global_total_impulse_data\"] = {}\n        if \"global_total_trend_data\" not in values: values[\"global_total_trend_data\"] = {}\n        \n        # NIVELES 1-5: Orquestadores de estado intra-timeframe\n        if \"partial_phase_orchestrator\" not in values: values[\"partial_phase_orchestrator\"] = PartialPhaseStates(symbol=symbol)\n        if \"partial_impulse_orchestrator\" not in values: values[\"partial_impulse_orchestrator\"] = PartialImpulseStates(symbol=symbol)\n        if \"macd_cycle_orchestrator\" not in values: values[\"macd_cycle_orchestrator\"] = MacdCycleStates(symbol=symbol)\n        if \"total_impulse_orchestrator\" not in values: values[\"total_impulse_orchestrator\"] = TotalImpulseStates(symbol=symbol)\n        if \"total_trend_orchestrator\" not in values: values[\"total_trend_orchestrator\"] = TotalTrendStates(symbol=symbol)\n        \n        # Orquestador maestro de la jerarquía cósmica (Niveles 6-13)\n        if \"cosmic_hierarchy_orchestrator\" not in values: values[\"cosmic_hierarchy_orchestrator\"] = CosmicHierarchyMasterOrchestrator(symbol=symbol)\n        \n        # Orquestadores especializados\n        if \"market_regime_orchestrator\" not in values: values[\"market_regime_orchestrator\"] = MarketRegimeOrchestrator(symbol=symbol)\n        if \"multi_tf_dynamics_manager\" not in values: values[\"multi_tf_dynamics_manager\"] = GlobalTimeframeOrchestrator(symbol=symbol)\n        if \"ranking_metrics\" not in values: values[\"ranking_metrics\"] = SymbolRankingMetrics(symbol=symbol)\n        \n        return values\n\n    async def process_alert(self, parsed_alert: AlertPayload, metrics_manager: Any):\n        \"\"\"\n        Orquesta el flujo completo de procesamiento de una alerta en cascada,\n        siguiendo la jerarquía lógica de la estructura del mercado.\n        \"\"\"\n        # --- PASO 1: Actualizar datos de entrada y TFs globales ---\n        # El \"Oído\" recibe la alerta y la guarda.\n        self.alert_manager_data.add_alert_to_history(parsed_alert)\n        \n        # El orquestador de TFs superiores procesa la alerta para actualizar sus propios datos.\n        # Esto es independiente de la cascada de 1m.\n        self.multi_tf_dynamics_manager.process_alert(parsed_alert)\n\n        # --- PASO 2: Procesar la cascada de estado para el timeframe de 1m ---\n        # La lógica fluye siguiendo la Jerarquía Cósmica: de \"La Ola\" hasta \"La Fuerza Terrestre\"\n\n        # NIVEL 1 -> NIVEL 2: ¿La alerta completa \"La Ola\" y forma \"La Marea Parcial\"?\n        # El orquestador de fases procesa la alerta y devuelve CERO o MÁS impulsos parciales completados.\n        completed_partial_impulses = self.partial_phase_orchestrator.process_alert(\n            parsed_alert, self.partial_phase_data, self.partial_impulse_data\n        )\n        \n        # NIVEL 2 -> NIVEL 3: ¿Los impulsos parciales completan \"La Lucha de Mareas\"?\n        # Procesar cada impulso parcial completado para formar ciclos MACD\n        completed_macd_cycles = []\n        for partial_impulse in completed_partial_impulses:\n            macd_cycle = self.macd_cycle_orchestrator.process_completed_partial_impulse(\n                partial_impulse, self.macd_cycle_data\n            )\n            if macd_cycle:\n                completed_macd_cycles.append(macd_cycle)\n        \n        # NIVEL 3 -> NIVEL 4: ¿Los ciclos MACD completan \"La Corriente Oceánica\"?\n        # Procesar cada ciclo MACD completado para formar impulsos totales\n        completed_total_impulses = []\n        for macd_cycle in completed_macd_cycles:\n            total_impulse = self.total_impulse_orchestrator.process_completed_macd_cycle(\n                macd_cycle, self.total_impulse_data\n            )\n            if total_impulse:\n                completed_total_impulses.append(total_impulse)\n\n        # NIVEL 4 -> NIVEL 5: ¿Los impulsos totales completan \"La Fuerza Terrestre\"?\n        # Procesar cada impulso total completado para formar tendencias totales\n        completed_total_trends = []\n        for total_impulse in completed_total_impulses:\n            total_trend = self.total_trend_orchestrator.process_completed_total_impulse(\n                total_impulse, self.total_trend_data\n            )\n            if total_trend:\n                completed_total_trends.append(total_trend)\n        \n        # --- PASO 3: Procesar niveles superiores (6-13) si hay cambios significativos ---\n        # NIVELES 6-13: Actualizar las \"Fuerzas Gravitacionales\" multi-timeframe\n        if completed_total_trends:\n            # Actualizar el régimen de mercado basado en la Fuerza Terrestre (Nivel 5)\n            self.market_regime_orchestrator.process_completed_total_trend(\n                completed_total_trends[-1]  # Usar la tendencia más reciente\n            )\n            \n            # Procesar impulsos totales a través del Orquestador Maestro de la Jerarquía Cósmica\n            # Esto actualiza automáticamente todos los niveles 6-13 de forma consistente\n            for completed_total_impulse in completed_total_impulses:\n                cosmic_results = self.cosmic_hierarchy_orchestrator.process_total_impulse_1m(\n                    completed_total_impulse\n                )\n                \n                # Actualizar los contenedores de datos globales con los resultados\n                for timeframe, global_impulse_data in cosmic_results.items():\n                    if global_impulse_data:\n                        self.global_total_impulse_data[timeframe] = global_impulse_data\n                        \n                        # También actualizar el contenedor de tendencias si se completa una tendencia global\n                        # (esto se maneja internamente por el CosmicHierarchyMasterOrchestrator)\n                        logger.debug(f\"[{self.symbol}] Impulso global completado en {timeframe}: {global_impulse_data.side}\")\n        \n        # --- PASO 4: Calcular métricas finales ---\n        # El MetricsManager analiza toda la jerarquía cósmica para generar el ranking\n        if metrics_manager:\n            await metrics_manager.calculate_symbol_metrics(self)\n        \n        logger.debug(f\"[{self.symbol}] Alerta procesada. Jerarquía Cósmica actualizada (Niveles 1-13).\")\n\n__all__ = [\n    \"TradingPositionState\"\n]